From e91d6022203a00e911cfbc568301bec7654136d5 Mon Sep 17 00:00:00 2001
From: Hesham ALMatary <heshamelmatary@gmail.com>
Date: Sat, 16 Aug 2014 14:47:05 +0200
Subject: [PATCH 1/3] Add or1k tick timer register definitions

---
 cpukit/score/cpu/or1k/rtems/score/or1k-utility.h | 47 +++++++++++++++---------
 1 file changed, 30 insertions(+), 17 deletions(-)

diff --git a/cpukit/score/cpu/or1k/rtems/score/or1k-utility.h b/cpukit/score/cpu/or1k/rtems/score/or1k-utility.h
index 74c14d7..d92e696 100644
--- a/cpukit/score/cpu/or1k/rtems/score/or1k-utility.h
+++ b/cpukit/score/cpu/or1k/rtems/score/or1k-utility.h
@@ -10,10 +10,10 @@
  * found in the file LICENSE in this distribution or at
  * http://www.rtems.org/license/LICENSE.
  */
-
+ 
 #ifndef _RTEMS_SCORE_OR1K_UTILITY_H
 #define _RTEMS_SCORE_OR1K_UTILITY_H
-
+ 
 /* SPR groups definitions */
 #define SPR_GRP_SHAMT 11
 #define SPR_GRP0_SYS_CTRL  (0  << SPR_GRP_SHAMT)
@@ -66,7 +66,7 @@
 #define CPU_OR1K_SPR_EPCR13   (SPR_GRP0_SYS_CTRL + 45)
 #define CPU_OR1K_SPR_EPCR14   (SPR_GRP0_SYS_CTRL + 46)
 #define CPU_OR1K_SPR_EPCR15   (SPR_GRP0_SYS_CTRL + 47)
-#define CPU_OR1K_SPR_EEAR0    (SPR_GRP0_SYS_CTRL + 48)
+#define CPU_OR1K_SPR_EEAR0    (SPR_GRP0_SYS_CTRL + 48) 
 #define CPU_OR1K_SPR_EEAR1    (SPR_GRP0_SYS_CTRL + 49)
 #define CPU_OR1K_SPR_EEAR2    (SPR_GRP0_SYS_CTRL + 50)
 #define CPU_OR1K_SPR_EEAR3    (SPR_GRP0_SYS_CTRL + 51)
@@ -199,10 +199,10 @@
 #define CPU_OR1K_SPR_TTMR   (SPR_GPR10_TICK_TMR + 0)
 #define CPU_OR1K_SPR_TTCR   (SPR_GPR10_TICK_TMR + 1)
 
- /* Shift amount macros for bits position in Supervision Register */
+ /* Shift amount macros for bits position in Supervision Register */ 
 #define CPU_OR1K_SPR_SR_SHAMT_SM     (0)
-#define CPU_OR1K_SPR_SR_SHAMT_TEE    (1)
-#define CPU_OR1K_SPR_SR_SHAMT_IEE    (2)
+#define CPU_OR1K_SPR_SR_SHAMT_TEE    (1) 
+#define CPU_OR1K_SPR_SR_SHAMT_IEE    (2) 
 #define CPU_OR1K_SPR_SR_SHAMT_DCE    (3)
 #define CPU_OR1K_SPR_SR_SHAMT_ICE    (4)
 #define CPU_OR1K_SPR_SR_SHAMT_DME    (5)
@@ -221,7 +221,7 @@
 
 /* Supervision Mode Register. @see OpenRISC architecture manual*/
 
- /* Supervisor Mode */
+ /* Supervisor Mode */ 
 #define CPU_OR1K_SPR_SR_SM    (1 << CPU_OR1K_SPR_SR_SHAMT_SM)
 /* Tick Timer Exception Enabled */
 #define CPU_OR1K_SPR_SR_TEE   (1 << CPU_OR1K_SPR_SR_SHAMT_TEE)
@@ -229,7 +229,7 @@
 #define CPU_OR1K_SPR_SR_IEE   (1 << CPU_OR1K_SPR_SR_SHAMT_IEE)
 /* Data Cache Enable */
 #define CPU_OR1K_SPR_SR_DCE   (1 << CPU_OR1K_SPR_SR_SHAMT_DCE)
-/* Instruction Cache Enable */
+/* Instruction Cache Enable */      
 #define CPU_OR1K_SPR_SR_ICE   (1 << CPU_OR1K_SPR_SR_SHAMT_ICE)
 /* Data MMU Enable */
 #define CPU_OR1K_SPR_SR_DME   (1 << CPU_OR1K_SPR_SR_SHAMT_DME)
@@ -258,6 +258,19 @@
 /*Context ID (Fast Context Switching) */
 #define CPU_OR1K_SPR_SR_CID   (F << CPU_OR1K_SPR_SR_SHAMT_CID)
 
+/* Tick timer configuration bits */
+#define CPU_OR1K_SPR_TTMR_SHAMT_IP    28
+#define CPU_OR1K_SPR_TTMR_SHAMT_IE    29
+#define CPU_OR1K_SPR_TTMR_SHAMT_MODE  30
+
+#define CPU_OR1K_SPR_TTMR_TP_MASK       (0x0FFFFFFF)
+#define CPU_OR1K_SPR_TTMR_IP            (1 << CPU_OR1K_SPR_TTMR_SHAMT_IP)
+#define CPU_OR1K_SPR_TTMR_IE            (1 << CPU_OR1K_SPR_TTMR_SHAMT_IE)
+#define CPU_OR1K_SPR_TTMR_MODE_OFF      (0x0 << CPU_OR1K_SPR_TTMR_SHAMT_MODE)
+#define CPU_OR1K_SPR_TTMR_MODE_RESTART  (0x1 << CPU_OR1K_SPR_TTMR_SHAMT_MODE)
+#define CPU_OR1K_SPR_TTMR_MODE_ONE_SHOT (0x2 << CPU_OR1K_SPR_TTMR_SHAMT_MODE)
+#define CPU_OR1K_SPR_TTMR_MODE_CONT     (0x3 << CPU_OR1K_SPR_TTMR_SHAMT_MODE)
+
 /* Power management register bits */
 #define CPU_OR1K_SPR_PMR_SHAMT_SDF  0
 #define CPU_OR1K_SPR_PMR_SHAMT_DME  4
@@ -272,7 +285,7 @@
 #define CPU_OR1K_SPR_PMR_SUME (1 << CPU_OR1K_SPR_PMR_SHAMT_SUME)
 
 /* Shift amount macros for bit positions in Power Management register */
-
+ 
 #ifndef ASM
 
 #include <stddef.h>
@@ -289,15 +302,15 @@ extern "C" {
  * @see OpenRISC architecture manual - revision 0.
  */
 typedef enum {
-  OR1K_EXCEPTION_RESET = 1,
-  OR1K_EXCEPTION_BUS_ERR = 2,
+  OR1K_EXCEPTION_RESET = 1, 
+  OR1K_EXCEPTION_BUS_ERR = 2, 
   OR1K_EXCEPTION_D_PF = 3, /* Data Page Fault */
   OR1K_EXCEPTION_I_PF = 4, /* Instruction Page Fault */
-  OR1K_EXCEPTION_TICK_TIMER = 5,
+  OR1K_EXCEPTION_TICK_TIMER = 5, 
   OR1K_EXCEPTION_ALIGNMENT = 6,
   OR1K_EXCEPTION_I_UNDEF= 7, /* Undefiend instruction */
   OR1K_EXCEPTION_IRQ = 8, /* External interrupt */
-  OR1K_EXCPETION_D_TLB = 9, /* Data TLB miss */
+  OR1K_EXCPETION_D_TLB = 9, /* Data TLB miss */ 
   OR1K_EXCPETION_I_TLB = 10, /* Instruction TLB miss */
   OR1K_EXCPETION_RANGE = 11, /* Range exception */
   OR1K_EXCPETION_SYS_CALL = 12,
@@ -313,16 +326,16 @@ typedef enum {
 static inline uint32_t _OR1K_mfspr(uint32_t reg)
 {
    uint32_t spr_value;
-
+  
    asm volatile (
      "l.mfspr  %0, %1, 0;\n\t"
      : "=r" (spr_value) : "r" (reg));
-
+   
    return spr_value;
 }
 
 static inline void _OR1K_mtspr(uint32_t reg, uint32_t value)
-{
+{ 
    asm volatile (
      "l.mtspr  %1, %0, 0;\n\t"
      :: "r" (value), "r" (reg)
@@ -331,7 +344,7 @@ static inline void _OR1K_mtspr(uint32_t reg, uint32_t value)
 
 /**
  * @brief The slow down feature takes advantage of the low-power
- * dividers in external clock generation circuitry to enable full
+ * dividers in external clock generation circuitry to enable full 
  * functionality, but at a lower frequency so that power consumption
  * is reduced. @see OpenRISC architecture manual, power management section.
  *
-- 
1.9.3

